{"version":3,"sources":["components/NavItem.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Navitem","id","this","props","item","to","tolink","onClick","activec","bind","Component","Navbar","activeitem","x","state","NavItemActive","length","document","getElementById","classList","remove","setState","add","App","className","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SAWeA,E,iLAPf,OACA,wBAAIC,GAAIC,KAAKC,MAAMC,MACnB,kBAAC,IAAD,CAAMC,GAAIH,KAAKC,MAAMG,OAAQC,QAASL,KAAKC,MAAMK,QAAQC,KAAKP,KAAKA,KAAKC,MAAMC,OAAQF,KAAKC,MAAMC,W,GAJ3EM,aC+BPC,E,YA9Bf,WAAYR,GACX,IAAD,8BACA,4CAAMA,KAKNS,WAAW,SAACC,GAET,EAAKC,MAAMC,cAAcC,OAAO,GACnCC,SAASC,eAAe,EAAKJ,MAAMC,eAAeI,UAAUC,OAAO,UAEnE,EAAKC,SAAS,CAAC,UAAYR,IAAG,WAC9BI,SAASC,eAAe,EAAKJ,MAAMC,eAAeI,UAAUG,IAAI,cAVhE,EAAKR,MAAM,CACX,cAAgB,IAHhB,E,sEAgBA,OACA,6BACA,4BACA,kBAAC,EAAD,CAASV,KAAK,OAAOE,OAAO,IAAKE,QAASN,KAAKU,aAC/C,kBAAC,EAAD,CAASR,KAAK,QAAQE,OAAO,SAAUE,QAASN,KAAKU,aACrD,kBAAC,EAAD,CAASR,KAAK,YAAYE,OAAO,aAAcE,QAASN,KAAKU,aAC7D,kBAAC,EAAD,CAASR,KAAK,SAASE,OAAO,UAAWE,QAASN,KAAKU,aACvD,kBAAC,EAAD,CAASR,KAAK,UAAUE,OAAO,WAAYE,QAASN,KAAKU,mB,GAzBpCF,aCWNa,MATf,WACA,OACA,kBAAC,IAAD,KACA,yBAAKC,UAAU,OACf,kBAAC,EAAD,SCIoBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASd,SAASC,eAAe,SD6H3C,kBAAmBc,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a2ddc703.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nclass Navitem extends Component {\r\nrender() {\r\nreturn (\r\n<li id={this.props.item}>\r\n<Link to={this.props.tolink} onClick={this.props.activec.bind(this,this.props.item)}>{this.props.item}</Link>\r\n</li>\r\n)\r\n}\r\n}\r\nexport default Navitem","import React, { Component } from 'react';\r\nimport Navitem from './NavItem';\r\nclass Navbar extends Component {\r\nconstructor(props)\r\n{\r\nsuper(props);\r\nthis.state={\r\n'NavItemActive':''\r\n}\r\n}\r\nactiveitem=(x)=>\r\n{\r\nif(this.state.NavItemActive.length>0){\r\ndocument.getElementById(this.state.NavItemActive).classList.remove('active');\r\n}\r\nthis.setState({'NavItemId':x},()=>{\r\ndocument.getElementById(this.state.NavItemActive).classList.add('active');\r\n});\r\n};\r\nrender() {\r\nreturn (\r\n<nav>\r\n<ul>\r\n<Navitem item=\"Home\" tolink=\"/\"  activec={this.activeitem}></Navitem>\r\n<Navitem item=\"About\" tolink=\"/about\"  activec={this.activeitem}></Navitem>\r\n<Navitem item=\"Education\" tolink=\"/education\"  activec={this.activeitem}></Navitem>\r\n<Navitem item=\"Skills\" tolink=\"/skills\"  activec={this.activeitem}></Navitem>\r\n<Navitem item=\"Contact\" tolink=\"/contact\"  activec={this.activeitem}></Navitem>\r\n</ul>\r\n</nav>\r\n)\r\n}\r\n}\r\nexport default Navbar","import React from 'react';\nimport './App.css';\nimport {BrowserRouter as Router,Route,} from \"react-router-dom\";\nimport Navbar from './components/Navbar';\nfunction App() {\nreturn (\n<Router>\n<div className=\"App\">\n<Navbar />\n</div>\n</Router>\n)\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}